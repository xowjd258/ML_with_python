#y=a1*x1+a2*x2+a3*x3  >>>   1/(1+e^(-1))   >>>>>>>  H(x)=1/(1+e^(-ax-b)) 
#loss=-y*logh(x)=-(1-y)log(1-h(x)) >>>>>> y=1=>h(x)=1 >>>> y=0=> h(x)=0

import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim


x_data = [[1, 2], [2, 3], [3, 1], [4, 3], [5, 3], [6, 2]]
y_data = [[0], [0], [0], [1], [1], [1]]
x_train = torch.FloatTensor(x_data)
y_train = torch.FloatTensor(y_data)

# initialize
W = torch.zeros((2, 1), requires_grad=True)
b = torch.zeros(1, requires_grad=True)
# optimizer
optimizer = optim.SGD([W, b], lr=1)

nb_epochs = 1000
for epoch in range(nb_epochs + 1):

    # cost
    hypothesis = torch.sigmoid(x_train.matmul(W) + b) # or .mm or @
    cost = (-(y_train * torch.log(hypothesis)
            + (1 - y_train) * torch.log(1 - hypothesis)).mean())

    # gradient descent
    optimizer.zero_grad()
    cost.backward()
    optimizer.step()

    # check progress
    if epoch % 100 == 0:
        print(f'Epoch {epoch:4d}/{nb_epochs} Cost: {cost.item():.6f}')
